# -*- coding: utf-8 -*-
"""DSA HW 2 EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s9pwcuEqAvxMMXlNhFUhvVh3vKLQOaAW
"""

# Necessary import statements:
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl
import seaborn as sns

df = pd.read_csv('aug_train.csv')
df.head()

"""### Percentage of People Looking For New Job"""

data = df['target'].value_counts()
colors = ['cornflowerblue', 'royalblue', 'lightsteelblue']
labels = ['Not Seeking Job', 'Seeking Job']

# Plot results:
plt.figure('Ratio of People Seeking New Job', figsize=(4,4), facecolor='grey')
plt.pie(labels=labels, x=data, colors=colors)
plt.show()

"""There is around 25 percent of people seeking a new job which means that this data will be unbalanced.

# Missing Values
"""

print(df.isna().sum() )

"""Here we can see that gender, enrolled_universtiy, education_level, major_discipline, experience, company_size, comapny_type, and last_new_job have missing data. This will have to be dealt with when we implement the machine learning model in the scripts CleanData.py file. For now we will just remark its influence in that data set.

# Enrollee ID

Since Enrollee ID is just a unique identifier for each person it will have to impact on the model. This column can be removed when it comes time to making the machine learning model.

# City
"""

# How many cities are in the data set:
unique_cities = df['city'].nunique()
print("Number of unique cities is:", unique_cities)
print("percentage of unique cities in proportion to total people in data is:", (unique_cities/len(df))*100, "percent.")

# Population per City for top 10 cities:
df['city'].value_counts()[:10].plot(kind='pie')

sns.countplot(data=df, x = 'city', hue='target', palette='Blues', order=df.city.value_counts().iloc[:8].index)

"""Analysis of City Feature:
We can see that each of the top 10 populated cities of the data set have different proprtions of people seeking(1.0) versus not seeking(0.0) a new job. It is very likely that this feature will be very important when it comes to training the model as it is very distinguishing and the city where you come from can help determine if one seeks a new job.

# City Development Index Feature Importance
"""

sns.countplot(data=df, x = 'city_development_index', hue='target', palette='Blues', order=df.city_development_index.value_counts().iloc[:8].index)

"""We can see that each city index even if this is just the top 10 most frequent are each very unique from one another. Due to this, I believe that this feature will be very influential for the model training.

# Gender

###Men Vs. Women Seeking Job
"""

# Males Desired:
males = df[df["gender"] == 'Male']
desired_males = males[males["target"] == 1.0]
num_desired_males = desired_males.shape[0]

# Females Desired:
females = df[df["gender"] == 'Female']
desired_females = females[females["target"] == 1.0]
num_desired_females = desired_females.shape[0]

# Unknown Genders Desired:
unknown_gender = df[df["gender"].isnull()]
desired_unknown_genders = unknown_gender[unknown_gender["target"] == 1.0]
num_desired_unknown_genders = desired_unknown_genders.shape[0]

# Results:
genders = ['males', 'females', 'unknown']
colors = ['cornflowerblue', 'royalblue', 'lightsteelblue']
desired_genders = [num_desired_males, num_desired_females, num_desired_unknown_genders]

# Plot results:
plt.figure('Ratio of Genders Desired By Recruiters', figsize=(4,4), facecolor='grey')
plt.pie(labels=genders, x=desired_genders, colors=colors)
plt.show()

"""### Proportion of Men Seeking Job versus Man Not Seeking Job


"""

males = df[df["gender"] == 'Male']

# Males Desired:
desired_males = males[males["target"] == 1.0]
num_desired_males = desired_males.shape[0]

# Males Not Desired:
undesired_males = males[males["target"] == 0.0]
num_undesired_males = undesired_males.shape[0]

# Results
data = [num_desired_males, num_undesired_males]
labels = ['Males Seeking Job', 'Males Not Seeking Job']
colors = ['cornflowerblue', 'royalblue']

# Plot results:
plt.figure('Ratio of Men Desired to Women Men', figsize=(4,4), facecolor='grey')
plt.pie(x=data, labels=labels, colors=colors)
plt.show()

"""### Proportion of Woman Seeking Job versus Woman Not Seeking Job 

"""

women = df[df["gender"] == 'Female']

# Women Desired:
desired_women = women[women["target"] == 1.0]
num_desired_women = desired_women.shape[0]

# Women Not Desired:
undesired_women = women[women["target"] == 0.0]
num_undesired_women = undesired_women.shape[0]

# Results
data = [num_desired_women, num_undesired_women]
labels = ['Women Seeking Job', 'Women Not Seeking Job']
colors = ['cornflowerblue', 'royalblue']

# Plot results:
plt.figure('Ratio of Women Desired to Women Undesired', figsize=(4,4), facecolor='grey')
plt.pie(x=data, labels=labels, colors=colors)
plt.show()

"""### Analysis Of Male Vs. Female Data

There are many more men labelled in the data compared to woman, but the percentage of men seeking jobs and women seeking jobs are very similar when compared to their respective gender. This could mean that the data here is not as important for the model as it does not show that being a male or female makes one more likely to leave their job.

# Relevant Experience
"""

# People with Relative Experience:
rel_exp = df[df["relevent_experience"] == 'Has relevent experience']
desired_rel_exp = rel_exp[rel_exp["target"] == 1.0]
num_desired_rel_exp = desired_rel_exp.shape[0]

# People without Relative Experience:
no_exp = df[df["relevent_experience"] == 'No relevent experience']
desired_no_exp = no_exp[no_exp["target"] == 1.0]
num_desired_no_exp = desired_no_exp.shape[0]

# Unknown Experience:
unknown_exp = df[df["relevent_experience"].isnull()]
desired_unknown_exp = unknown_exp[unknown_exp["target"] == 1.0]
num_desired_unknown_exp = desired_unknown_exp.shape[0]

# Results
data = [num_desired_rel_exp, num_desired_no_exp, num_desired_unknown_exp]
labels = ['Seeking Job W/ Exp.', 'Seeking Job w/o Exp.', 'Unkown Experience']
colors = ['cornflowerblue', 'royalblue', 'lightsteelblue']

# Plot results:
plt.figure('Ratio of People Desired with Relative Experience vs. No Relative Experience', figsize=(4,4), facecolor='grey')
plt.pie(x=data, labels=labels, colors=colors)
plt.show()

# Relative Experience to Target Values
sns.countplot(data=df, x = 'relevent_experience', hue='target', palette='Blues')

"""Analysis:
We can see here that both have more people that are not seeking a new job. However, the proportion of people wanting a new job with relevant experience is about %25 while no experience is about %50. With that info, it could mean that people with no experience are more likely to want a new job, so this feature may be of some importantce when training the moedl.

# Enrolled in University
"""

# Relative Experience to Target Values
sns.countplot(data=df, x = 'enrolled_university', hue='target', palette='Blues')

"""Here we can see that each of the categories again have more people not seeking job. However, we see here that people enrolled in studies are more likely to be seeking a job then no enrollment. This makes sense as they are probably students, and students are constantly seeking entry-level jobs. This feature is probable to have a strong correlation with experience and probably low experience in particular.

# Education Level
"""

sns.countplot(data=df, x = 'education_level', hue='target', palette='Blues')

"""Here we see that the most proprtions are quite similar for each education level. There seems to be no distinguishing characteristic, so I believe that this feature will not be necessary for the model.

# Major Discipline
"""

sns.countplot(data=df, x = 'major_discipline', hue='target', palette='Blues')

"""Analysis: 
Here we see that that STEM is the dominating major which is normal as Comp Sci and Mathematics are some of the most common majors for Data Science. I do not believe that this category will be very influential as all the other majors are so minute and follow the same trend as STEM anyways.

# Experience
"""

sns.countplot(data=df, x = 'experience', hue='target', palette='Blues')

"""This category does not seem to be very important as they all seem to follow same proportions.

# Company Size
"""

sns.countplot(data=df, x = 'company_size', hue='target', palette='Blues')

"""This category does not seem to be very important as they all seem to follow same proportions.

# Company Type
"""

sns.countplot(data=df, x = 'company_type', hue='target', palette='Blues')

"""This category does not seem to be very important as they all seem to follow same proportions.

# Last New Job
"""

sns.countplot(data=df, x = 'last_new_job', hue='target', palette='Blues')

"""This category does not seem to be very important as they all seem to follow same proportions.

# Training Hours
"""

sns.countplot(data=df, x = 'training_hours', hue='target', palette='Blues', order=df.training_hours.value_counts().iloc[:8].index)

"""This category does not seem to be very important as they all seem to follow same proportions.

"""