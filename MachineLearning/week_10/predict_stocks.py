# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zu540nYnfsIHm1Czj1rZiOSEJqBrDlm4
"""

# Necessary import statements:
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout
from keras.layers import *

"""Read the data and set the training and testing sets

"""

tesla_df = pd.read_csv("TSLA.csv")

"""Split the tesla stock in half for training and testing sets"""

training_set = tesla_df.iloc[:800, 1:2].values
test_set = tesla_df.iloc[800:, 1:2].values

"""Normalize data using a MinMax Scaler: Transforms all values into a range between 0 and 1. Minimizes bias"""

min_max_scaler = MinMaxScaler()
normalized_training_set = min_max_scaler.fit_transform(training_set)
X_train = []
y_train = []
for i in range(60, 800):
    X_train.append(normalized_training_set[i-50:i, 0])
    y_train.append(normalized_training_set[i, 0])
X_train, y_train = np.array(X_train), np.array(y_train)
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

"""Train the training set"""

model = Sequential()
model.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))
model.add(Dropout(0.2))

model.add(LSTM(units = 50, return_sequences = True))
model.add(Dropout(0.2))

model.add(LSTM(units = 50, return_sequences = True))
model.add(Dropout(0.2))

model.add(LSTM(units = 50))
model.add(Dropout(0.2))

model.add(Dense(units = 1))


model.compile(optimizer = 'adam', loss = 'mean_squared_error')


model.fit(X_train, y_train, epochs = 100, batch_size = 32)

"""Make predictions"""

dataset_train = tesla_df.iloc[:800, 1:2]
dataset_test = tesla_df.iloc[800:, 1:2]
dataset_total = pd.concat((dataset_train, dataset_test), axis = 0)
inputs = dataset_total[len(dataset_total) - len(dataset_test) - 60:].values
inputs = inputs.reshape(-1,1)
inputs = min_max_scaler.transform(inputs)
X_test = []
for i in range(60, 519):
    X_test.append(inputs[i-50:i, 0])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

predictions = model.predict(X_test)
predictions = min_max_scaler.inverse_transform(predictions)

"""Graph the model"""

plt.plot(tesla_df.loc[800:, 'Date'],dataset_test.values, color = 'red', label = 'Tesla Stock Price')
plt.plot(tesla_df.loc[800:, 'Date'],predictions, color = 'blue', label = 'Predictions')
plt.legend()
plt.show()