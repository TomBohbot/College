# -*- coding: utf-8 -*-
"""IrisKnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/110R0P5EvMK-t_UM2ReP6y-jgJbq1wYoz
"""

# Necessary import statements:
import matplotlib.pyplot as plt
import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split

def get_test_train_data():
  # load the iris dataset: 
  iris_data = load_iris() 
  # get x and y data:
  x = iris_data.data[:,[2,3] ]
  y = iris_data.target.reshape(-1, 1)
  # split the data:
  train_x, test_x, train_y, test_y = train_test_split(x, y, test_size=0.20)
  return [train_x, train_y, test_x, test_y]

# Helper method to implement Knn:
def distance(x1, y1, x2, y2):
  return np.sqrt( (x1-x2)**2 + (y1-y2)**2)

def implement_knn(k, x, y, train_x, train_y):
  closestPoints = []
  for i in range(len(train_x)):
    distancee = distance(x, y, train_x[i][0], train_x[i][1])
    closestPoints.append([distancee, train_y[i][0]])
  sortedDistances = sorted(closestPoints, key=lambda x: x[0])
  # Calculate which element is closest:
  setosa = 0
  versicolor = 0
  virginica = 0
  for i in range(k):
    if sortedDistances[i][1] == 0:
      setosa += 1
    elif sortedDistances[i][1] == 1:
      versicolor += 1
    elif sortedDistances[i][1] == 2:
      virginica += 1
  if setosa >= versicolor and setosa >= virginica:
    return 0
  elif versicolor >= setosa and versicolor >= virginica:
    return 1
  else:
    return 2

def graph_iris_data(dataset):
  fig = plt.figure(figsize=(6,6) )
  for i in range(len(dataset)):
    if dataset[i][2] == 0:
      plt.plot(dataset[i][0],
              dataset[i][1],
              'o',
              markersize = 10,
              alpha = 0.75,
              color = 'blue'
              )
    elif dataset [i][2] == 1:
      plt.plot(dataset[i][0],
                dataset[i][1],
                '<',
                markersize = 10,
                alpha = 0.75,
                color = 'red'
      )
    elif dataset [i][2] == 2:
      plt.plot(dataset[i][0],
                dataset[i][1],
                '<',
                markersize = 10,
                alpha = 0.75,
                color = 'purple'
      )
  plt.xlabel(r'x_0')
  plt.ylabel(r'x_1')
  plt.show()

# get test vs train data:
iris_data = get_test_train_data()
train_x = iris_data[0]
train_y = iris_data[1]
test_x  = iris_data[2]
test_y  = iris_data[3]
# Driver for iris dataset:
correct_output = 0
for i in range(len(test_x) ):
  result = implement_knn(5, test_x[i][0], test_y[i][0], train_x, train_y)
  if result == test_y[i]:
    correct_output += 1
# Determine percentage of correct output:
percentage_correct = correct_output/len(test_y)
# blue = setosa, red = versicolor, purple = virginica
print("RESULT", percentage_correct)